WITH CODE_JE_LINES AS (
    SELECT
        gcc.code_combination_id,
        gcc.segment3,
        gcc.segment6,
        c.accounted_cr,
        c.accounted_dr,
        c.je_line_num,
        c.je_header_id,
        c.status AS line_status
    FROM
        gl_code_combinations gcc
        JOIN GL_JE_LINES c ON gcc.code_combination_id = c.code_combination_id
),
GAAP_DATA AS (
    SELECT
        cj.segment3 AS GAAP_ACCOUNT,
        cj.segment6 AS segment,
        cj.accounted_cr AS GAAP_CREDIT,
        cj.accounted_dr AS GAAP_DEBITS,
        b.name AS Journal_name,
        cj.je_line_num AS GAAP_LINE_NUM,
        b.je_source AS source,
        b.je_header_id AS header_id,
        b.parent_je_header_id AS parent_header,
        cj.line_status AS line_status,
        b.status AS header_status
    FROM
        CODE_JE_LINES cj
        JOIN GL_JE_HEADERS b ON cj.je_header_id = b.je_header_id
        JOIN GL_LEDGERS gll ON b.ledger_id = gll.ledger_id(+)
    WHERE
        gll.name LIKE '%GAAP%'
),
FERC_DATA AS (
    SELECT
        cj.segment3 AS FERC_ACCOUNT,
        cj.segment6 AS segment,
        cj.accounted_cr AS FERC_CREDIT,
        cj.accounted_dr AS FERC_DEBITS,
        b.name AS Journal_name,
        cj.je_line_num AS FERC_LINE_NUM,
        b.je_source AS source,
        b.je_header_id AS header_id,
        b.parent_je_header_id AS parent_header,
        cj.line_status AS line_status,
        b.status AS header_status
    FROM
        CODE_JE_LINES cj
        JOIN GL_JE_HEADERS b ON cj.je_header_id = b.je_header_id
        JOIN GL_LEDGERS gll ON b.ledger_id = gll.ledger_id(+)
    WHERE
        gll.name LIKE '%FERC%'
)
SELECT
    -- your select clause here, which can include columns from GAAP_DATA and FERC_DATA
FROM
    FERC_DATA
    LEFT JOIN GAAP_DATA ON
        FERC_DATA.FERC_LINE_NUM = GAAP_DATA.GAAP_LINE_NUM(+)
        AND FERC_DATA.parent_header = GAAP_DATA.header_id(+)
WHERE
    NVL(GAAP_DATA.source, FERC_DATA.source) NOT IN ('Payables', 'Receivables', 'Receipt Accounting', 'projects', 'Project Accounting')
    AND FERC_DATA.line_status = 'P'
ORDER BY
    Transaction_idg;




---------

with filter_table as (
    select 
    gcc.segment3 AS GAAP_ACCOUNT, 
          gcc.segment6 AS segment, 
          c.accounted_cr AS GAAP_CREDIT, 
          c.accounted_dr AS GAAP_DEBITS, 
          c.je_line_num as GAAP_LINE_NUM,
          c.status as line_status,
          c.je_header_id
          from 
          gl_code_combinations gcc, 
          GL_JE_LINES c
          where 
          gcc.code_combination_id = c.code_combination_id
          and c.status = 'P'
),
SELECT 
          f.GAAP_ACCOUNT,
          f.segment,  
          f.GAAP_CREDIT, 
          f.GAAP_DEBITS,  
          B.name as Journal_name,
          f.GAAP_LINE_NUM,
          b.je_source as source,
          b.je_header_id as header_id,
          b.parent_je_header_id as parent_header,
          f.line_status,
          b.status as header_status 
        FROM 
          filter_table f,
          GL_JE_HEADERS B, 
          GL_LEDGERS gll 
        WHERE 1=1
          AND f.je_header_id = b.je_header_id 
          AND B.LEDGER_ID = gll.LEDGER_ID (+)
          AND gll.name LIKE '%GAAP%'



------------------- Change from previous query ---------
-- Union 1: a.	FERC data should be driving. So, please use outer-join.  
-- Union 3 â€“ FERC data (FERC only and GAAP tied data)
-- Only distinct Journal Name between union
-- Used PARENT_JE_HEADER_ID in union 2 to get the FERC side.
-- Added Segment6 as project_code
-- Added filter on status = posted
-- Removed PJC tables and replaced Transaction id with XDA column.
------------------------------------------------------------

SELECT 
  which, 
  concat(nvl(concat('GAAP: ',GAAP_SEGEMNT),''),
  nvl(concat('  FERC: ',FERC_SEGEMNT),''))as Project_Code,
  TRANSACTION_IDG, 
  nvl(Journal_name, ferc) as Journal_name, 
  source,
  GAAP_ACCOUNT, 
  FERC_ACCOUNT, 
  GAAP_CREDIT, 
  GAAP_DEBITS, 
  FERC_CREDIT, 
  FERC_DEBITS,
  gaap_event_id,
  gaap_line_num,
  ferc_event_id,
  ferc_line_num
--   line_status,
--   header_status 
from 
  (
    SELECT 
      'FERC at PPM(Transaction)' as which,
      GAAP_DATA.segment as GAAP_SEGEMNT,
      FERC_DATA.segment as FERC_SEGEMNT,
      GAAP_DATA.TRANSACTION_IDG, 
      GAAP_DATA.Journal_name, 
      FERC_DATA.Journal_name as ferc, 
      nvl(GAAP_DATA.source, FERC_DATA.source) as source,
      GAAP_DATA.GAAP_ACCOUNT, 
      FERC_DATA.FERC_ACCOUNT, 
      GAAP_DATA.GAAP_CREDIT, 
      GAAP_DATA.GAAP_DEBITS, 
      FERC_DATA.FERC_CREDIT, 
      FERC_DATA.FERC_DEBITS,
      GAAP_DATA.event_id as gaap_event_id,
      GAAP_DATA.ae_line_num as gaap_line_num,
      GAAP_DATA.event_id as ferc_event_id,
      FERC_DATA.ae_line_num as ferc_line_num,
      nvl(GAAP_DATA.line_status, FERC_DATA.line_status)  as line_status,
      nvl(GAAP_DATA.header_status, FERC_DATA.header_status) as header_status
    FROM 
      (
        SELECT 
          xda.source_distribution_id_num_1 AS TRANSACTION_IDG, 
          gcc.segment3 AS GAAP_ACCOUNT, 
          gcc.segment6 AS segment, 
          c.accounted_cr AS GAAP_CREDIT, 
          c.accounted_dr AS GAAP_DEBITS, 
          xda.event_id as event_id, 
          xda.ae_line_num as ae_line_num, 
          B.name as Journal_name,
          b.je_source as source,
          c.status as line_status,
          b.status as header_status  
        FROM 
          xla_distribution_links XDA, 
          xla_ae_lines XAL, 
          gl_code_combinations gcc, 
          gl_import_references gir, 
          GL_JE_LINES c, 
          GL_JE_HEADERS B, 
          GL_LEDGERS gll 
        WHERE 
          
		  XDA.ae_header_id = XAL.ae_header_id 
          AND XDA.ae_line_num = XAL.ae_line_num 
          and XAL.GL_SL_LINK_ID = gir.GL_SL_LINK_ID(+) 
          and xal.GL_SL_LINK_TABLE = gir.GL_SL_LINK_TABLE(+) ----
          and gir.JE_HEADER_ID = c.JE_HEADER_ID(+) 
          AND XAL.code_combination_id = gcc.code_combination_id 
          AND gcc.code_combination_id = c.code_combination_id (+) 
          AND c.je_header_id = b.je_header_id  
          AND B.LEDGER_ID = gll.LEDGER_ID (+) --             AND peia.expenditure_item_id = 31005
          --             AND B.name = '21-03-2024 Miscellaneous Cost'
          AND gll.name LIKE '%GAAP%'
--           and c.status = 'P'
      ) GAAP_DATA, 
      (
        SELECT 
          xda.source_distribution_id_num_1 AS TRANSACTION_IDG,  
          gcc.segment3 AS FERC_ACCOUNT, 
          gcc.segment6 AS segment, 
          c.accounted_cr AS FERC_CREDIT, 
          c.accounted_dr AS FERC_DEBITS, 
          xda.event_id as event_id, 
          xda.ae_line_num as ae_line_num, 
          B.name as Journal_name,
          b.je_source as source ,
          c.status as line_status,
          b.status as header_status 
        FROM  
          xla_distribution_links XDA, 
          xla_ae_lines XAL, 
          gl_code_combinations gcc, 
          gl_import_references gir, 
          GL_JE_LINES c, 
          GL_JE_HEADERS B, 
          GL_LEDGERS gll 
        WHERE 
		XDA.ae_header_id = XAL.ae_header_id 
          AND XDA.ae_line_num = XAL.ae_line_num 
          and XAL.GL_SL_LINK_ID = gir.GL_SL_LINK_ID(+) 
          and xal.GL_SL_LINK_TABLE = gir.GL_SL_LINK_TABLE(+) ----
          and gir.JE_HEADER_ID = b.JE_HEADER_ID(+) 
          AND XAL.code_combination_id = gcc.code_combination_id 
          AND gcc.code_combination_id = c.code_combination_id (+) 
          AND B.je_header_id = c.je_header_id 
          AND B.LEDGER_ID = gll.LEDGER_ID (+) --             AND peia.expenditure_item_id = 31004
          --             AND B.name = '21-03-2024 Miscellaneous Cost'
          AND gll.name LIKE '%FERC%'
      ) FERC_DATA 
    where 
      FERC_DATA.TRANSACTION_IDG = GAAP_DATA.TRANSACTION_IDG(+) 
      and FERC_DATA.event_id = GAAP_DATA.event_id(+) 
      and FERC_DATA.ae_line_num = GAAP_DATA.ae_line_num(+) 
      and FERC_DATA.Journal_name = GAAP_DATA.Journal_name(+) --     and GAAP_DATA.TRANSACTION_IDG = 31004
      --     AND GAAP_DATA.Journal_name = '21-03-2024 Miscellaneous Cost'
      --     ORDER BY
      --     TRANSACTION_IDG, GAAP_ACCOUNT, FERC_ACCOUNT
    union 
    SELECT 
      Case when GAAP_DATA.GAAP_ACCOUNT is null then 'Only FERC' else 'FERC Ledger data in GL (linked GAAP accounts)' end as which, 
      GAAP_DATA.segment as GAAP_SEGEMNT,
      FERC_DATA.segment as FERC_SEGEMNT,
      null as TRANSACTION_IDG, 
      GAAP_DATA.Journal_name, 
      FERC_DATA.Journal_name as ferc,
      nvl(GAAP_DATA.source, FERC_DATA.source) as source, 
      GAAP_DATA.GAAP_ACCOUNT, 
      FERC_DATA.FERC_ACCOUNT, 
      GAAP_DATA.GAAP_CREDIT, 
      GAAP_DATA.GAAP_DEBITS, 
      FERC_DATA.FERC_CREDIT, 
      FERC_DATA.FERC_DEBITS,
      null as gaap_event_id,
      GAAP_DATA.GAAP_LINE_NUM as gaap_line_num,
      null as ferc_event_id,
      FERC_DATA.FERC_LINE_NUM as ferc_line_num
      ,
      nvl(GAAP_DATA.line_status, FERC_DATA.line_status)  as line_status,
      nvl(GAAP_DATA.header_status, FERC_DATA.header_status) as header_status 
    FROM 
      (
        SELECT 
          gcc.segment3 AS GAAP_ACCOUNT, 
          gcc.segment6 AS segment, 
          c.accounted_cr AS GAAP_CREDIT, 
          c.accounted_dr AS GAAP_DEBITS, 
          B.name as Journal_name ,
          c.je_line_num as GAAP_LINE_NUM,
          b.je_source as source,
          b.je_header_id as header_id,
          b.parent_je_header_id as parent_header,
          c.status as line_status,
          b.status as header_status 
        FROM  
          gl_code_combinations gcc, 
          GL_JE_LINES c, 
          GL_JE_HEADERS B, 
          GL_LEDGERS gll 
        WHERE 1=1
          and gcc.code_combination_id = c.code_combination_id 
          AND c.je_header_id = b.je_header_id  
          AND B.LEDGER_ID = gll.LEDGER_ID (+)
          AND gll.name LIKE '%GAAP%'
      ) GAAP_DATA, 
      (
        SELECT 
          gcc.segment3 AS FERC_ACCOUNT,
          gcc.segment6 AS segment,  
          c.accounted_cr AS FERC_CREDIT, 
          c.accounted_dr AS FERC_DEBITS,  
          B.name as Journal_name,
          c.je_line_num as FERC_LINE_NUM,
          b.je_source as source,
          b.je_header_id as header_id,
          b.parent_je_header_id as parent_header,
          c.status as line_status,
          b.status as header_status 
        FROM 
          gl_code_combinations gcc,  
          GL_JE_LINES c, 
          GL_JE_HEADERS B, 
          GL_LEDGERS gll 
        WHERE 1=1
          and gcc.code_combination_id = c.code_combination_id
          AND c.je_header_id = b.je_header_id 
          AND B.LEDGER_ID = gll.LEDGER_ID (+)
          AND gll.name LIKE '%FERC%'
--           and gcc.segment3 = '234001'
--           and B.name = 'GL-FUT-014-J2'
      ) FERC_DATA 
    where  
--       FERC_DATA.Journal_name = GAAP_DATA.Journal_name(+)
      FERC_DATA.FERC_LINE_NUM = GAAP_DATA.GAAP_LINE_NUM(+)
      and FERC_DATA.parent_header = GAAP_DATA.header_id(+)
      and nvl(GAAP_DATA.source, FERC_DATA.source) not in ('Payables', 'Receivables', 'Receipt Accounting', 'projects', 'Project Accounting')
            --and (FERC_DATA.Journal_name = 'GL-FUT-014-J2') --     and gjh.name = '22-03-2024 Miscellaneous Cost'
      )  
where 
  1 = 1 
--   and which = 'FERC at PPM(Transaction)' 
  and Line_status = 'P'
--   and TRANSACTION_IDG = '33000'
--   AND (
--     Journal_name ='01-03-2024 Miscellaneous Cost' --'Case 4 Test 03-2132 CIP Category Change'
--   ) --     'CASE 2 FUT TEST-2132 P`OWERPLAN'

order by Transaction_idg
  ;

----==========================================

SELECT PROGRAM_ID,
       PROGRAM_NAME,
       PROGRAM_NUMBER,
       STATUS,
       DESCRIPTION,
       ASSESSMENT,
       BUDGET,
       PRIORITY,
       OWNING_ORGANIZATION,
       LINE_OF_BUSINESS,
       REGION,
       STRATEGY,
       OBJECTIVE,
       PROGRAM_MEMBER
FROM (
    SELECT PROGRAM_ID,
           PROGRAM_NAME,
           PROGRAM_NUMBER,
           STATUS,
           DESCRIPTION,
           ASSESSMENT,
           BUDGET,
           PRIORITY,
           OWNING_ORGANIZATION,
           LINE_OF_BUSINESS,
           last_update_date,
           creation_date,
           REGION,
           STRATEGY,
           OBJECTIVE,
           PROGRAM_MEMBER,
           ROW_NUMBER() OVER (ORDER BY creation_date DESC) AS row_seq
    FROM (
        SELECT DISTINCT 
               ppdb.PROGRAM_ID,
               ppdt.PROGRAM_NAME,
               ppdb.PROGRAM_NUMBER,
               ppdb.last_update_date,
               ppdb.creation_date,
               (SELECT fl.MEANING 
                FROM FND_LOOKUPS fl 
                WHERE fl.LOOKUP_CODE = ppdb.PROGRAM_SYSTEM_STATUS_CODE) AS STATUS,
               ppdt.PROGRAM_DESC AS DESCRIPTION,
               (SELECT fl.MEANING 
                FROM FND_LOOKUPS fl 
                WHERE fl.LOOKUP_CODE = ppdb.ASSESSMENT_CODE) AS ASSESSMENT,
               ppdb.PROGRAM_BUDGET AS BUDGET,
               (SELECT fl.MEANING 
                FROM FND_LOOKUPS fl 
                WHERE fl.LOOKUP_CODE = ppdb.PRIORITY_CODE) AS PRIORITY,
               (SELECT NAME 
                FROM HR_ALL_ORGANIZATION_UNITS_X haou
                WHERE ppdb.OWNING_ORGANIZATION_ID = haou.ORGANIZATION_ID) AS OWNING_ORGANIZATION,
               (SELECT fl.MEANING 
                FROM FND_LOOKUPS fl 
                WHERE fl.LOOKUP_CODE = ppdb.LOB_CODE) AS LINE_OF_BUSINESS,
               (SELECT fl.MEANING 
                FROM FND_LOOKUPS fl 
                WHERE fl.LOOKUP_CODE = ppdb.REGION_CODE) AS REGION,
               (SELECT fl.MEANING 
                FROM FND_LOOKUPS fl 
                WHERE fl.LOOKUP_CODE = ppdb.STRATEGY_CODE) AS STRATEGY,
               ppdt.PROGRAM_OBJECTIVE AS OBJECTIVE,
               perperson.FULL_NAME AS PROGRAM_MEMBER
        FROM PJS_PROGRAM_DEFN_B ppdb
        JOIN PJS_PROGRAM_DEFN_TL ppdt ON ppdb.PROGRAM_ID = ppdt.PROGRAM_ID
        LEFT JOIN PJS_PROGRAM_STAKEHOLDERS ppst ON ppdb.PROGRAM_ID = ppst.PROGRAM_ID
        LEFT JOIN PER_PERSON_NAMES_F_V perperson ON ppst.PERSON_ID = perperson.PERSON_ID
        WHERE ppst.ACCESS_TYPE_CODE = 'ORA_PJS_OWNER'
          AND ppst.ASSIGNMENT_CATEGORY_CODE = 'ORA_PJS_DIRECT'
          AND ppdb.last_update_date >= (CASE WHEN :IS_FULL_EXTRACT = 'N' THEN SYSDATE - 3 ELSE ppdb.last_update_date END)
        ORDER BY ppdb.creation_date DESC
    ) A
) X
WHERE row_seq BETWEEN :START_SEQ AND :END_SEQ;


----------------------
CIHOME=/usr/bin 
SBUCKET=$1
DBUCKET=$2
NAMESPACE=$3
YEAR=$(date | awk '{print $6}')
MONTH=$(date | awk '{print $2}')
DAY=$(date | awk '{print $3}')
TIME=$(date | awk '{print $4" "$5}'| sed 's/:/-/g')
FOLDER_NAME=$4
FILE_FILTER=$5

# object store list to find the file
cd $OCIHOME
oci os object list --bucket-name $SBUCKET --auth instance_principal --all | grep name | awk '{ print $2 }' | sed 's/"//g' | sed 's/,//g' > /tmp/cfs_oos_copy_file.list
# copy file to Archive Bucket 
if [ -z "$FOLDER_NAME" ]
then
	echo "IN FIRST"
    for filename in `cat /tmp/cfs_oos_copy_file.list` 
        do oci os object copy --bucket-name $SBUCKET --source-object-name $filename --destination-namespace $NAMESPACE --destination-bucket $DBUCKET --destination-object-name "$YEAR/$MONTH/$DAY/$TIME/$filename" --auth instance_principal 
        #do echo "$filename"
		done
	# delete file from ODI Bucket
	oci os object bulk-delete --namespace $NAMESPACE --bucket-name $SBUCKET --auth instance_principal --force
else
	echo "IN ELSE"
	for filename in `cat /tmp/cfs_oos_copy_file.list`
		do 
		if [[ "$filename" == *"$FILE_FILTER"* ]];
		then
			oci os object copy --bucket-name $SBUCKET --source-object-name $filename --destination-namespace $NAMESPACE --destination-bucket $DBUCKET --destination-object-name "$FOLDER_NAME/$YEAR/$MONTH/$DAY/$TIME/$filename" --auth instance_principal 
        #do echo "$filename"
		fi
	done
	# delete file from ODI Bucket
	oci os object bulk-delete --namespace $NAMESPACE --bucket-name $SBUCKET --auth instance_principal --force --include *$FILE_FILTER*
fi

------------------------------------
#!/bin/bash

# Ensure file_suffix is provided
if [ -z "$1" ]; then
    echo "Usage: $0 <file_suffix>"
    exit 1
fi

file_suffix=$1
now=$(date +%Y-%m-%d-%s)

# Extract and decode the reportBytes element
trap_res=$(grep -i '<reportBytes>' /home/oracle/efs_data/projectstatushistory/output/response_project_status_history.xml | awk -F '<reportBytes>|</reportBytes>' '{print $2}' | base64 --decode)

# Append the decoded result to the CSV file
echo "$trap_res" >> /home/oracle/efs_data/projectstatushistory/logs/project_status_history_$file_suffix.csv


-------
file_suffix=$1
now=`date +%Y-%m-%d-%s`
trap_res=`cat /home/oracle/efs_data/projectstatushistory/output/response_project_status_history.xml | grep -i reportbytes | awk -F '<reportBytes>' '{printf $2}' | awk -F '</reportBytes>' '{printf $1}' | base64 --decode`
echo "$trap_res" >>/home/oracle/efs_data/projectstatushistory/logs/project_status_history_$file_suffix.csv


----------------
logs_path = /home/oracle/efs_data/projectstatushistory/logs
rm -rf $logs_path/*

---------------------
Caused by: Sql = select  PWD_1.PASSWORD  PASSWORD
from /home/oracle/efs_data/efs_erp_bicc_pwd PWD_1
/*$$SNPS_START_KEYSNP$CRDWG_TABLESNP$CRTABLE_NAME=pwdSNP$CRLOAD_FILE=/home/oracle/efs_data/efs_erp_bicc_pwdSNP$CRFILE_FORMAT=DSNP$CRFILE_SEP_FIELD=0x002cSNP$CRFILE_SEP_LINE=0x000ASNP$CRFILE_FIRST_ROW=0SNP$CRFILE_ENC_FIELD=SNP$CRFILE_DEC_SEP=SNP$CRSNP$CRDWG_COLSNP$CRCOL_NAME=PASSWORDSNP$CRTYPE_NAME=STRINGSNP$CRORDER=1SNP$CRLENGTH=200SNP$CRPRECISION=200SNP$CRACTION_ON_ERROR=NULLSNP$CR$$SNPS_END_KEY*/  
, Error Msg = java.sql.SQLException: ODI-40400: Invalid format description

---------------
import com.sunopsis.dwg.DwgObject
import oracle.odi.core.OdiInstance;
import oracle.odi.domain.project.OdiVariable;
import oracle.odi.domain.project.finder.*;
import oracle.odi.domain.runtime.variable.OdiVariableValue;
import oracle.odi.domain.runtime.variable.finder.*;
import java.sql.*;
import oracle.odi.domain.project.OdiProject;
import oracle.odi.core.persistence.transaction.support.DefaultTransactionDefinition;
import oracle.odi.domain.xrefs.expression.*;
import oracle.odi.languages.support.*;

OdiInstance odiInstance = odiRef.getOdiInstance();
//throw new Exception("got instance")
txnDef = new DefaultTransactionDefinition(); 
//throw new Exception("got txn def")

tm = odiInstance.getTransactionManager();
tme = odiInstance.getTransactionalEntityManager(); 
txnStatus=tm.getTransaction(txnDef)
//decpw- DwgObject.snpsDecypher (#PASS, odiInstance): 
decpw= DwgObject.snpsDecypher(#PASS, odiInstance);
File f= new File('/home/oracle/efs_data/efs_erp_bicc_pwd') 
f.write(decpw)






_------------


import com.sunopsis.dwg.DwgObject
import oracle.odi.core.OdiInstance
import oracle.odi.domain.project.OdiVariable
import oracle.odi.domain.project.finder.*
import oracle.odi.domain.runtime.variable.OdiVariableValue
import oracle.odi.domain.runtime.variable.finder.*
import java.sql.*
import oracle.odi.domain.project.OdiProject
import oracle.odi.core.persistence.transaction.support.DefaultTransactionDefinition
import oracle.odi.domain.xrefs.expression.*
import oracle.odi.languages.support.*

try {
    // Get ODI instance
    OdiInstance odiInstance = odiRef.getOdiInstance()
    if (odiInstance == null) {
        throw new Exception("ODI instance is null")
    }
    println "ODI instance obtained successfully"

    // Define transaction
    txnDef = new DefaultTransactionDefinition()
    if (txnDef == null) {
        throw new Exception("Transaction definition is null")
    }
    println "Transaction definition created successfully"

    // Get transaction manager
    tm = odiInstance.getTransactionManager()
    if (tm == null) {
        throw new Exception("Transaction manager is null")
    }
    println "Transaction manager obtained successfully"

    // Get entity manager
    tme = odiInstance.getTransactionalEntityManager()
    if (tme == null) {
        throw new Exception("Transactional entity manager is null")
    }
    println "Transactional entity manager obtained successfully"

    // Begin transaction
    txnStatus = tm.getTransaction(txnDef)
    if (txnStatus == null) {
        throw new Exception("Transaction status is null")
    }
    println "Transaction started successfully"

    // Decrypt password
    decpw = DwgObject.snpsDecypher("#PASS", odiInstance)
    if (decpw == null) {
        throw new Exception("Decrypted password is null")
    }
    println "Password decrypted successfully"

    // Write decrypted password to file
    File f = new File('/home/oracle/efs_data/efs_erp_bicc_pwd')
    f.write(decpw)
    println "Password written to file successfully"

    // Commit transaction
    tm.commit(txnStatus)
    println "Transaction committed successfully"
} catch (Exception e) {
    // Rollback transaction in case of error
    if (txnStatus != null && !txnStatus.isCompleted()) {
        tm.rollback(txnStatus)
    }
    // Log the exception or handle it as necessary
    println "Error: " + e.message
}

------------------------------------

ODI-1226: Step PRC_DECRYPT_ERP_PWD fails after 1 attempt(s).
ODI-1232: Procedure PRC_DECRYPT_ERP_PWD execution fails.
Caused By: java.lang.IllegalStateException: Can't overwrite cause with org.codehaus.groovy.control.MultipleCompilationErrorsException: startup failed:
Script23.groovy: 52: unexpected token: 1 @ line 52, column 38.
       decpw = DwgObject.snpsDecypher(""1cl2mXXvo603SiklJRAT+9iTfevj0HsD5TDYKQ3wqHE="", odiInstance)
                                        ^
